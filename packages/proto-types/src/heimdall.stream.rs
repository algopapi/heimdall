// This file is @generated by prost-build.
/// Optional filter parameters can be added here
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamRequest {}
/// New request message for the token stream, allowing client to specify pools
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamTokensRequest {
    #[prost(string, repeated, tag = "1")]
    pub pool_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// This is the clean, structured data format for the client, mirroring the
/// TokenData interface.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenUpdate {
    #[prost(string, tag = "1")]
    pub pool_address: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub price: f64,
    #[prost(double, tag = "3")]
    pub market_cap: f64,
    #[prost(double, tag = "4")]
    pub fdv: f64,
    #[prost(double, tag = "5")]
    pub usdc_balance: f64,
    #[prost(double, tag = "6")]
    pub target_amount: f64,
    #[prost(uint64, tag = "7")]
    pub last_updated_ts: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountUpdate {
    #[prost(uint64, tag = "1")]
    pub slot: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub pubkey: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "3")]
    pub lamports: u64,
    #[prost(bytes = "vec", tag = "4")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "5")]
    pub executable: bool,
    #[prost(uint64, tag = "6")]
    pub rent_epoch: u64,
    #[prost(bytes = "vec", tag = "7")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "8")]
    pub write_version: u64,
    #[prost(bytes = "vec", optional, tag = "9")]
    pub txn_signature: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SlotUpdate {
    #[prost(uint64, tag = "1")]
    pub slot: u64,
    #[prost(uint64, tag = "2")]
    pub parent: u64,
    #[prost(uint32, tag = "3")]
    pub status: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionUpdate {
    #[prost(bytes = "vec", tag = "1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "2")]
    pub is_vote: bool,
    #[prost(uint64, tag = "3")]
    pub slot: u64,
    #[prost(uint64, tag = "4")]
    pub index: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventUpdate {
    #[prost(oneof = "event_update::Event", tags = "1, 2, 3")]
    pub event: ::core::option::Option<event_update::Event>,
}
/// Nested message and enum types in `EventUpdate`.
pub mod event_update {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(message, tag = "1")]
        Account(super::AccountUpdate),
        #[prost(message, tag = "2")]
        Slot(super::SlotUpdate),
        #[prost(message, tag = "3")]
        Transaction(super::TransactionUpdate),
    }
}
/// Generated client implementations.
pub mod heimdall_stream_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct HeimdallStreamClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl HeimdallStreamClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> HeimdallStreamClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> HeimdallStreamClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            HeimdallStreamClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn stream_accounts(
            &mut self,
            request: impl tonic::IntoRequest<super::StreamRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::AccountUpdate>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/heimdall.stream.HeimdallStream/StreamAccounts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("heimdall.stream.HeimdallStream", "StreamAccounts"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn stream_slots(
            &mut self,
            request: impl tonic::IntoRequest<super::StreamRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SlotUpdate>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/heimdall.stream.HeimdallStream/StreamSlots",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("heimdall.stream.HeimdallStream", "StreamSlots"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn stream_transactions(
            &mut self,
            request: impl tonic::IntoRequest<super::StreamRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::TransactionUpdate>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/heimdall.stream.HeimdallStream/StreamTransactions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "heimdall.stream.HeimdallStream",
                        "StreamTransactions",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn stream_all(
            &mut self,
            request: impl tonic::IntoRequest<super::StreamRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::EventUpdate>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/heimdall.stream.HeimdallStream/StreamAll",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("heimdall.stream.HeimdallStream", "StreamAll"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// New, specialized stream for token/pool price updates
        pub async fn stream_tokens(
            &mut self,
            request: impl tonic::IntoRequest<super::StreamTokensRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::TokenUpdate>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/heimdall.stream.HeimdallStream/StreamTokens",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("heimdall.stream.HeimdallStream", "StreamTokens"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod heimdall_stream_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with HeimdallStreamServer.
    #[async_trait]
    pub trait HeimdallStream: Send + Sync + 'static {
        /// Server streaming response type for the StreamAccounts method.
        type StreamAccountsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::AccountUpdate, tonic::Status>,
            >
            + Send
            + 'static;
        async fn stream_accounts(
            &self,
            request: tonic::Request<super::StreamRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamAccountsStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamSlots method.
        type StreamSlotsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SlotUpdate, tonic::Status>,
            >
            + Send
            + 'static;
        async fn stream_slots(
            &self,
            request: tonic::Request<super::StreamRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamSlotsStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamTransactions method.
        type StreamTransactionsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::TransactionUpdate, tonic::Status>,
            >
            + Send
            + 'static;
        async fn stream_transactions(
            &self,
            request: tonic::Request<super::StreamRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamTransactionsStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamAll method.
        type StreamAllStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::EventUpdate, tonic::Status>,
            >
            + Send
            + 'static;
        async fn stream_all(
            &self,
            request: tonic::Request<super::StreamRequest>,
        ) -> std::result::Result<tonic::Response<Self::StreamAllStream>, tonic::Status>;
        /// Server streaming response type for the StreamTokens method.
        type StreamTokensStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::TokenUpdate, tonic::Status>,
            >
            + Send
            + 'static;
        /// New, specialized stream for token/pool price updates
        async fn stream_tokens(
            &self,
            request: tonic::Request<super::StreamTokensRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamTokensStream>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct HeimdallStreamServer<T: HeimdallStream> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: HeimdallStream> HeimdallStreamServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for HeimdallStreamServer<T>
    where
        T: HeimdallStream,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/heimdall.stream.HeimdallStream/StreamAccounts" => {
                    #[allow(non_camel_case_types)]
                    struct StreamAccountsSvc<T: HeimdallStream>(pub Arc<T>);
                    impl<
                        T: HeimdallStream,
                    > tonic::server::ServerStreamingService<super::StreamRequest>
                    for StreamAccountsSvc<T> {
                        type Response = super::AccountUpdate;
                        type ResponseStream = T::StreamAccountsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StreamRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HeimdallStream>::stream_accounts(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamAccountsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/heimdall.stream.HeimdallStream/StreamSlots" => {
                    #[allow(non_camel_case_types)]
                    struct StreamSlotsSvc<T: HeimdallStream>(pub Arc<T>);
                    impl<
                        T: HeimdallStream,
                    > tonic::server::ServerStreamingService<super::StreamRequest>
                    for StreamSlotsSvc<T> {
                        type Response = super::SlotUpdate;
                        type ResponseStream = T::StreamSlotsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StreamRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HeimdallStream>::stream_slots(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamSlotsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/heimdall.stream.HeimdallStream/StreamTransactions" => {
                    #[allow(non_camel_case_types)]
                    struct StreamTransactionsSvc<T: HeimdallStream>(pub Arc<T>);
                    impl<
                        T: HeimdallStream,
                    > tonic::server::ServerStreamingService<super::StreamRequest>
                    for StreamTransactionsSvc<T> {
                        type Response = super::TransactionUpdate;
                        type ResponseStream = T::StreamTransactionsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StreamRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HeimdallStream>::stream_transactions(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamTransactionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/heimdall.stream.HeimdallStream/StreamAll" => {
                    #[allow(non_camel_case_types)]
                    struct StreamAllSvc<T: HeimdallStream>(pub Arc<T>);
                    impl<
                        T: HeimdallStream,
                    > tonic::server::ServerStreamingService<super::StreamRequest>
                    for StreamAllSvc<T> {
                        type Response = super::EventUpdate;
                        type ResponseStream = T::StreamAllStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StreamRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HeimdallStream>::stream_all(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamAllSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/heimdall.stream.HeimdallStream/StreamTokens" => {
                    #[allow(non_camel_case_types)]
                    struct StreamTokensSvc<T: HeimdallStream>(pub Arc<T>);
                    impl<
                        T: HeimdallStream,
                    > tonic::server::ServerStreamingService<super::StreamTokensRequest>
                    for StreamTokensSvc<T> {
                        type Response = super::TokenUpdate;
                        type ResponseStream = T::StreamTokensStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StreamTokensRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as HeimdallStream>::stream_tokens(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamTokensSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: HeimdallStream> Clone for HeimdallStreamServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: HeimdallStream> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: HeimdallStream> tonic::server::NamedService for HeimdallStreamServer<T> {
        const NAME: &'static str = "heimdall.stream.HeimdallStream";
    }
}
